<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小梦刚的博客</title>
  <subtitle>前端工程师</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-25T15:11:52.414Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小梦刚</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue</title>
    <link href="http://yoursite.com/2017/06/25/vue/"/>
    <id>http://yoursite.com/2017/06/25/vue/</id>
    <published>2017-06-25T15:05:30.000Z</published>
    <updated>2017-06-25T15:11:52.414Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>title: select<br>date: 2017-05-22 23:44:56</p>
<h2 id="tags"><a href="#tags" class="headerlink" title="tags:"></a>tags:</h2><h3 id="vue项目"><a href="#vue项目" class="headerlink" title="vue项目"></a>vue项目</h3><blockquote>
<p>项目中的截屏<br><img src="/images/1.png" alt=""><br><img src="/images/2.png" alt=""><br><img src="/images/3.png" alt=""><br><img src="/images/4.png" alt=""><br>如果需要更多的方法那就去看文档去吧。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;title: select&lt;br&gt;date: 2017-05-22 23:44:56&lt;/p&gt;
&lt;h2 id=&quot;tags&quot;&gt;&lt;a href=&quot;#tags&quot; class=&quot;headerlink&quot; title=&quot;tags:&quot;&gt;&lt;/a&gt;tags:&lt;/h2&gt;&lt;h3 id=&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>string</title>
    <link href="http://yoursite.com/2017/06/05/string/"/>
    <id>http://yoursite.com/2017/06/05/string/</id>
    <published>2017-06-05T14:24:02.000Z</published>
    <updated>2017-06-05T15:58:11.883Z</updated>
    
    <content type="html"><![CDATA[<h3 id="javascript总结之string"><a href="#javascript总结之string" class="headerlink" title="javascript总结之string"></a>javascript总结之string</h3><h4 id="String-类型是字符串"><a href="#String-类型是字符串" class="headerlink" title="String 类型是字符串;"></a>String 类型是字符串;</h4><h4 id="string-length"><a href="#string-length" class="headerlink" title="string.length;"></a>string.length;</h4><blockquote>
<p>字符串有length的方法为字符串的长度我们经常在开发中使用string.length进行循环做一些操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var str=&quot;hello word&quot;;</div><div class="line">alert(str.length);//10</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="访问字符串的方法"><a href="#访问字符串的方法" class="headerlink" title="访问字符串的方法"></a>访问字符串的方法</h4><blockquote>
<p>js中用于访问字符串的方法是<code>charAt()</code>和<code>charCodeAt()</code> 这两个方法都接受一个参数一个基于0的字符位置。charAt返回字符串位置坐在的字符串。charCodeAt();返回字符串所在位置字符串的字符串编码。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var str=&quot;hello word&quot;;</div><div class="line">alert(str.charCodeAt(1));//10</div><div class="line">alert(str.charAt(1));//e</div></pre></td></tr></table></figure>
<h4 id="字符串操作方法"><a href="#字符串操作方法" class="headerlink" title="字符串操作方法"></a>字符串操作方法</h4><h5 id="concat字符串拼接方法"><a href="#concat字符串拼接方法" class="headerlink" title="concat字符串拼接方法"></a>concat字符串拼接方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var str=&quot;123&quot;;</div><div class="line">var str3=str.concat(&quot;789&quot;);</div><div class="line">alert(str3)//123789</div></pre></td></tr></table></figure>
<h5 id="slice、substr、substring"><a href="#slice、substr、substring" class="headerlink" title="slice、substr、substring"></a>slice、substr、substring</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">这三个方法都会返回一个操作字符串后的字符串,</div><div class="line">而且还接受一个或者两个参数第一个代表字符串开始的位置，</div><div class="line">第二个数字为(对于slice和substring的第二个参数指的是字符串结束的位置)。</div><div class="line">而substr()的第二个参数为字符串的长度</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="字符串位置方法"><a href="#字符串位置方法" class="headerlink" title="字符串位置方法"></a>字符串位置方法</h4><h5 id="有两个方法可以从字符串中查找方法"><a href="#有两个方法可以从字符串中查找方法" class="headerlink" title="有两个方法可以从字符串中查找方法"></a>有两个方法可以从字符串中查找方法</h5><h5 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h5><blockquote>
<p>两个方法都是从一个字符串中搜索给定的字符串然后返回字符串的位置<br>indexOf();返回符合搜索结果的字符串的位置从前往后查找<br>lastIndexof 返回符合搜索结果的字符串的位置从后往前查找返回从前往后的位置</p>
</blockquote>
<h5 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h5><blockquote>
<p>indexOf 接受第二个参数 表示从当前的位置向后查找<br>lastIndexOf 接受第二个参数 表示从当前的位置向前查找<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var str=&quot;hello word&quot;;</div><div class="line">alert(str.indexOf(&quot;o&quot;));</div><div class="line">alert(str.lastIndexOf(&quot;o&quot;));</div><div class="line">alert(str.indexOf(&quot;o&quot;,5));</div><div class="line">alert(str.lastIndexOf(&quot;o&quot;,4));</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="trim-的方法"><a href="#trim-的方法" class="headerlink" title="trim()的方法"></a>trim()的方法</h4><blockquote>
<p>这个方法可以删除前后的空格返回一个没有空格的字符串</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var str=&quot;    hello word   &quot;;</div><div class="line">console.log(str.trim())</div></pre></td></tr></table></figure>
<h4 id="大小写转换方法；"><a href="#大小写转换方法；" class="headerlink" title="大小写转换方法；"></a>大小写转换方法；</h4><p>####toLowerCase();</p>
<blockquote>
<p>转换为小写字符串</p>
<p>####toUpperCase();<br>转换为大写字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var str=&quot;hello word&quot;;</div><div class="line">var str1=&quot;HELLO WORD&quot;;</div><div class="line">console.log(str.toUpperCase());</div><div class="line">console.log(str1.toLowerCase());</div></pre></td></tr></table></figure></p>
</blockquote>
<h5 id="字符串模式匹配方法"><a href="#字符串模式匹配方法" class="headerlink" title="字符串模式匹配方法"></a>字符串模式匹配方法</h5><h5 id="match接受一个参数正则或者字符串"><a href="#match接受一个参数正则或者字符串" class="headerlink" title="match接受一个参数正则或者字符串"></a>match接受一个参数正则或者字符串</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var text=&quot;cat,bat,sat,fat&quot;;</div><div class="line">var pattern=/.at/;</div><div class="line">var matches=text.match(pattern);</div></pre></td></tr></table></figure>
<blockquote>
<p>match 方法返回一个数组符合条件的字符串，<br>index所在的index位置<br>input用本的字符串</p>
</blockquote>
<h5 id="search"><a href="#search" class="headerlink" title="search"></a>search</h5><blockquote>
<p>接受一个正则找到返回索引没找到返回-1；</p>
</blockquote>
<h5 id="repalce"><a href="#repalce" class="headerlink" title="repalce"></a>repalce</h5><blockquote>
<p>接受两个参数第一个可以是正则,第二个可以是一个参数或者函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">var str = &quot;12xsxsx45xsx78xsxsom&quot;;</div><div class="line"></div><div class="line">	var str1 = str.replace(/[123456789]/g,function(match,op,text)&#123;</div><div class="line">				switch (match) &#123;</div><div class="line">					case &quot;1&quot;:</div><div class="line">						return &quot;a&quot;;</div><div class="line">					case &quot;2&quot;:</div><div class="line">						return &quot;b&quot;;</div><div class="line">					case &quot;3&quot;:</div><div class="line">						return &quot;c&quot;;</div><div class="line">					case &quot;4&quot;:</div><div class="line">						return &quot;d&quot;;</div><div class="line">					case &quot;5&quot;:</div><div class="line">						return &quot;e&quot;;</div><div class="line">					case &quot;6&quot;:</div><div class="line">						return &quot;f&quot;;</div><div class="line">					case &quot;7&quot;:</div><div class="line">						return &quot;g&quot;;</div><div class="line">					case &quot;8&quot;:</div><div class="line">						return &quot;h&quot;;</div><div class="line">					case &quot;9&quot;:</div><div class="line">						return &quot;i&quot;;</div><div class="line">				&#125;</div><div class="line">		&#125;);</div><div class="line"></div><div class="line">console.log(str1)</div></pre></td></tr></table></figure></p>
</blockquote>
<h5 id="split"><a href="#split" class="headerlink" title="split"></a>split</h5><blockquote>
<p>接受两个参数第一个参数依靠什么来进行切割字符串 第二个参数可不填为数组的长度</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var str = &quot;1,4,5,6,3,7,8,9,10,11,12&quot;;</div><div class="line">var arr=str.split(&quot;,&quot;,6)</div><div class="line">console.log(arr)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;javascript总结之string&quot;&gt;&lt;a href=&quot;#javascript总结之string&quot; class=&quot;headerlink&quot; title=&quot;javascript总结之string&quot;&gt;&lt;/a&gt;javascript总结之string&lt;/h3&gt;&lt;h4 id=&quot;String-类型是字符串&quot;&gt;&lt;a href=&quot;#String-类型是字符串&quot; class=&quot;headerlink&quot; title=&quot;String 类型是字符串;&quot;&gt;&lt;/a&gt;String 类型是字符串;&lt;/h4&gt;&lt;h4 id=&quot;string-length&quot;&gt;&lt;a href=&quot;#string-length&quot; class=&quot;headerlink&quot; title=&quot;string.length;&quot;&gt;&lt;/a&gt;string.length;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;字符串有length的方法为字符串的长度我们经常在开发中使用string.length进行循环做一些操作&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var str=&amp;quot;hello word&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(str.length);//10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;访问字符串的方法&quot;&gt;&lt;a href=&quot;#访问字符串的方法&quot; class=&quot;headerlink&quot; title=&quot;访问字符串的方法&quot;&gt;&lt;/a&gt;访问字符串的方法&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;js中用于访问字符串的方法是&lt;code&gt;charAt()&lt;/code&gt;和&lt;code&gt;charCodeAt()&lt;/code&gt; 这两个方法都接受一个参数一个基于0的字符位置。charAt返回字符串位置坐在的字符串。charCodeAt();返回字符串所在位置字符串的字符串编码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var str=&amp;quot;hello word&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(str.charCodeAt(1));//10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(str.charAt(1));//e&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;字符串操作方法&quot;&gt;&lt;a href=&quot;#字符串操作方法&quot; class=&quot;headerlink&quot; title=&quot;字符串操作方法&quot;&gt;&lt;/a&gt;字符串操作方法&lt;/h4&gt;&lt;h5 id=&quot;concat字符串拼接方法&quot;&gt;&lt;a href=&quot;#concat字符串拼接方法&quot; class=&quot;headerlink&quot; title=&quot;concat字符串拼接方法&quot;&gt;&lt;/a&gt;concat字符串拼接方法&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var str=&amp;quot;123&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var str3=str.concat(&amp;quot;789&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(str3)//123789&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;slice、substr、substring&quot;&gt;&lt;a href=&quot;#slice、substr、substring&quot; class=&quot;headerlink&quot; title=&quot;slice、substr、substring&quot;&gt;&lt;/a&gt;slice、substr、substring&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这三个方法都会返回一个操作字符串后的字符串,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;而且还接受一个或者两个参数第一个代表字符串开始的位置，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第二个数字为(对于slice和substring的第二个参数指的是字符串结束的位置)。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;而substr()的第二个参数为字符串的长度&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>富兰克林练习写作的方法</title>
    <link href="http://yoursite.com/2017/06/02/arclist/"/>
    <id>http://yoursite.com/2017/06/02/arclist/</id>
    <published>2017-06-01T16:40:41.000Z</published>
    <updated>2017-06-01T16:46:18.180Z</updated>
    
    <content type="html"><![CDATA[<p>如果说有哪一本书是让我看完心情激荡而且念念不忘的，那肯定是《富兰克林自传》，而这本书里最让我惊叹和牢记的是，是富兰克林练习写作的方法。</p>
<p>首先很惊叹的是，他居然这么小的年纪就有那么强的求知欲和奋斗精神。出身在一个多子家庭，作为一个不受重视的中间子，富兰克林很小就被送到大哥的印刷厂当学徒工，每日劳作，只能换来一日温饱。然而他却并不以为苦，还和哥哥商量，不去开伙的夫人那吃饭，而是付给他伙食费的一半，他自己解决食物的问题，哥哥自然欣然答应。富兰克林又将这二分之一伙食费中的一半拿来买书，每天只吃很少量的面包。即使这样艰苦，富兰克林依然觉得很划算，因为他可以买书，还可以省下来往返吃饭的时间看书了。</p>
<p>在这样的热切求知欲下，富兰克林逐渐摸索起来自己的一套写作训练方法。</p>
<p>首先是扩充词汇量，从印刷厂印刷的废弃资料，省下饭钱买到的书里，一点一点汲取只是的养分。其次是模仿名家，比如念一遍诗，把诗翻译成散文，再根据这个散文还原成诗，比较这个诗和原文的差别，从而一点一点发现不足和进步的地方。最后就是自己尝试写作了，那时他最多十五六岁，正好他哥哥有自己在出版报纸，他就给自己取了一个化名，假装成年人给他哥哥投稿。他哥哥很欣赏这个“陌生人”的文字，还召集一群朋友来讨论，这些朋友们也很喜欢，猜测的作者名字都是当时一些比较有名声的人。</p>
<p>就这样，长年累月的学习和训练，让富兰克林成为了一名优秀的表达者，为他后续去其他的城市单独打拼，创建印刷厂，发行报纸，撰写畅销的小册子打下了基础。</p>
<p>而富兰克林这种节俭、克制、专注的学习精神，也一直陪伴着他，让他从一名熟练的印刷工人变成印刷厂主，变成社会公益活动家，甚至在战争年代成为一名优秀的外交官。</p>
<h4 id="2017年好好规划你的目标你也可以的。"><a href="#2017年好好规划你的目标你也可以的。" class="headerlink" title="2017年好好规划你的目标你也可以的。"></a>2017年好好规划你的目标你也可以的。</h4><p><img src="/images/1.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果说有哪一本书是让我看完心情激荡而且念念不忘的，那肯定是《富兰克林自传》，而这本书里最让我惊叹和牢记的是，是富兰克林练习写作的方法。&lt;/p&gt;
&lt;p&gt;首先很惊叹的是，他居然这么小的年纪就有那么强的求知欲和奋斗精神。出身在一个多子家庭，作为一个不受重视的中间子，富兰克林很小就
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue实例</title>
    <link href="http://yoursite.com/2017/06/02/templace/"/>
    <id>http://yoursite.com/2017/06/02/templace/</id>
    <published>2017-06-01T16:11:44.000Z</published>
    <updated>2017-06-01T16:12:37.548Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue实例"><a href="#Vue实例" class="headerlink" title="Vue实例"></a>Vue实例</h3><h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><blockquote>
<p>每一个vue.js应用都是通过构造函数<code>vue</code>创建的vue的实例启动的:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var vm=new Vue(&#123;</div><div class="line">	//选项</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>因此在文档中 =经常会使用<code>vm</code>这个变量来表示Vue实例。<br>在实例<code>Vue</code>时，需要传入一个选项对象,它可以包括<code>数据 模板 挂载方法 生命周期</code>等选项。</p>
<p>可以扩展<code>Vue</code>构造器，</p>
</blockquote>
<h4 id="Vue-extend-options"><a href="#Vue-extend-options" class="headerlink" title="Vue.extend(options)"></a>Vue.extend(options)</h4><p>参数<br><code>{object}options</code><br>用法<br>使用基础Vue构造器，创建一个“子类” data在Vue.extend中必须是函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var profile=Vue.extend(&#123;</div><div class="line">	template: &apos;&lt;p&gt;&#123; &#123;firstName&#125; &#125; &#123; &#123;lastName&#125; &#125; &#123; &#123;name&#125; &#125;&lt;/p&gt;&apos;,</div><div class="line">	data: function()&#123;</div><div class="line">		return &#123;</div><div class="line">			firstName:&apos;water&apos;,</div><div class="line">			lastName: &apos;White&apos;</div><div class="line">			name: &apos;Heisenberg&apos;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<blockquote>
<p>我们可以通过创建可复用的组件构造器</p>
</blockquote>
<h4 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h4><p>每个vue实例都会代理其<code>data</code>对象所有的属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var data:&#123; a:1 &#125;;</div><div class="line">var sm=new Vue(&#123;</div><div class="line">	el:&quot;app&quot;,</div><div class="line">	data:data</div><div class="line">&#125;);</div><div class="line">data.a===vm.data.a//true</div><div class="line"></div><div class="line">//通过更改vm代理的data对象的数据也会对原始数据进行更改</div><div class="line"></div><div class="line">vm.a = 2;</div><div class="line">data.a//2</div><div class="line">//当然反过来一样更改原始数据vm所代理的数据也会进行改变</div></pre></td></tr></table></figure>
<h4 id="vue实例暴露的属性和方法"><a href="#vue实例暴露的属性和方法" class="headerlink" title="vue实例暴露的属性和方法"></a>vue实例暴露的属性和方法</h4><blockquote>
<p>1.vm.$data data<br>2.vm.$el  el<br>3.vm.watch //是一个实例方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var data=&#123;</div><div class="line">		a:1</div><div class="line">	&#125;;</div><div class="line">	var vm = new Vue(&#123;</div><div class="line">		el: &quot;#app&quot;,</div><div class="line">		data: data,</div><div class="line">		</div><div class="line">	&#125;);</div><div class="line">	vm.$watch(&apos;a&apos;,function(newVal,oldVal)&#123;  </div><div class="line">		console.log(newVal);</div><div class="line">		console.log(oldVal);</div><div class="line">	&#125;)</div></pre></td></tr></table></figure>
<h4 id="vue的生命周期"><a href="#vue的生命周期" class="headerlink" title="vue的生命周期"></a>vue的生命周期</h4><blockquote>
<p>created //实例已经创建<br>  beforeCompile //编译前<br>  compiled //编译后<br>  ready // 插入文档中<br>  beforeDestroy //销毁前<br>  destroyed //销毁后</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Vue实例&quot;&gt;&lt;a href=&quot;#Vue实例&quot; class=&quot;headerlink&quot; title=&quot;Vue实例&quot;&gt;&lt;/a&gt;Vue实例&lt;/h3&gt;&lt;h4 id=&quot;构造器&quot;&gt;&lt;a href=&quot;#构造器&quot; class=&quot;headerlink&quot; title=&quot;构造器&quot;&gt;&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>模板语法</title>
    <link href="http://yoursite.com/2017/06/02/case/"/>
    <id>http://yoursite.com/2017/06/02/case/</id>
    <published>2017-06-01T16:11:23.000Z</published>
    <updated>2017-06-01T16:13:14.508Z</updated>
    
    <content type="html"><![CDATA[<h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><blockquote>
<p>Vue.js使用了基于HTML的模板语法,允许开发者将Dom绑定的底层Vue实例的数据。</p>
</blockquote>
<h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><blockquote>
<p>数据绑定最常见的形式就是使用”Mustache”语法(双大括号)的文本插值:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;span&gt;&#123; &#123;msg&#125; &#125;&lt;span&gt;</div></pre></td></tr></table></figure>
<h4 id="v-on指令"><a href="#v-on指令" class="headerlink" title="v-on指令"></a>v-on指令</h4><blockquote>
<p>通过使用<code>v-once指令</code>,你也能执行一次性的插值当数据改变的时候插值处也不会改变。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app&quot; v-once&gt;</div><div class="line">		&#123; &#123; a &#125; &#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h4 id="纯HTML"><a href="#纯HTML" class="headerlink" title="纯HTML"></a>纯HTML</h4><blockquote>
<p>双大括号会将数据解释为纯文本而非HTML。为了输出真正的HTML需要<code>v-html</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app1&quot; v-html=&quot;b&quot;&gt;</div><div class="line">		</div><div class="line">&lt;/div&gt;</div><div class="line">var data=&#123;</div><div class="line">	a:1,</div><div class="line">	b:&quot;&lt;h1&gt;hello&lt;/h1&gt;&quot;</div><div class="line">&#125;;</div><div class="line">var vm = new Vue(&#123;</div><div class="line">	el: &quot;#app1&quot;,</div><div class="line">	data: data,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><blockquote>
<p>Mustache不能再HTML属性中使用,应使用<code>v-bind指令</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div v-bind:id=&quot;idname&quot;&gt; &lt;/div&gt;</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="使用javascript表达式"><a href="#使用javascript表达式" class="headerlink" title="使用javascript表达式"></a>使用javascript表达式</h4><blockquote>
<p>在vue中{ { } }表达式中可以完全使用javascript表达式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app3&quot;&gt;</div><div class="line">	&#123; &#123;num+1&#125; &#125;</div><div class="line">	&#123; &#123;ok===&quot;yes&quot;?&quot;对&quot;:&quot;错&quot;&#125; &#125;</div><div class="line">	&#123; &#123;msg.split(&quot;&quot;).reverse().join(&quot;&quot;) &#125; &#125;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">var vm = new Vue(&#123;</div><div class="line">	el: &quot;#app3&quot;,</div><div class="line">	data: &#123;</div><div class="line">		num:3,</div><div class="line">		ok:&quot;yes&quot;,</div><div class="line">		msg:&quot;123456789&quot;</div><div class="line">	&#125;,</div><div class="line">	</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>像这样的不会生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">这是语句，不是表达式</div><div class="line">&#123; &#123; var a = 1 &#125; &#125;</div><div class="line">流控制也不会生效，请使用三元表达式 </div><div class="line">&#123; &#123; if (ok) &#123; return message &#125; &#125; &#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><blockquote>
<p>指令是带有<code>v-</code>前缀的特殊属性。职责就是表达式的值改变的时候把某些相应的应用应用到Dom上</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;p v-if=&quot;seen&quot;&gt;Now you see me&lt;/p&gt;</div><div class="line">//根据seen的真假值来控制是否插入移除</div></pre></td></tr></table></figure>
<h4 id="v-on指令-1"><a href="#v-on指令-1" class="headerlink" title="v-on指令"></a>v-on指令</h4><blockquote>
<p>它用于监听DOM事件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div v-click=&quot;mythods&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>修饰符（modifiers）是以半角句号<code>.</code>指明的特殊后缀，表示一个指令应该以特殊方式绑定。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;form v-on:submit.prevent=&quot;onsubmit&quot;&gt;&lt;/form&gt;</div><div class="line">//点击的时候阻止表单提交</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;模板语法&quot;&gt;&lt;a href=&quot;#模板语法&quot; class=&quot;headerlink&quot; title=&quot;模板语法&quot;&gt;&lt;/a&gt;模板语法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Vue.js使用了基于HTML的模板语法,允许开发者将Dom绑定的底层Vue实例的数据。&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue简单入门</title>
    <link href="http://yoursite.com/2017/06/01/vuearc/"/>
    <id>http://yoursite.com/2017/06/01/vuearc/</id>
    <published>2017-05-31T16:25:39.000Z</published>
    <updated>2017-05-31T16:47:10.569Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue实战教程"><a href="#vue实战教程" class="headerlink" title="vue实战教程"></a>vue实战教程</h3><blockquote>
<p>jq现在越来越笨重mvvm框架层出不求。现在开始Vue的教程吧。vue作者是尤雨溪，作者这样说vue只需要一段html代码就上一片json数据就可以完成入门非常简单</p>
</blockquote>
<h4 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h4><blockquote>
<p>其实声明式渲染就是{ {} }表达式</p>
</blockquote>
<p><em>html</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;vue&quot;&gt;</div><div class="line">&#123; &#123;message&#125; &#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p><em>js</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var app=new Vue(&#123;</div><div class="line">el:&quot;#vue&quot;,//选择器</div><div class="line">data:&#123;</div><div class="line">	message:&quot;hello word&quot;//数据</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><em>结果</em></p>
<blockquote>
<p>hello word</p>
</blockquote>
<h4 id="vue-bind"><a href="#vue-bind" class="headerlink" title="vue-bind"></a>vue-bind</h4><blockquote>
<p><code>v-bind</code>成为指令我们可以动态的改变元素的属性 扩展ht<code>html</code>标签功能属性</p>
</blockquote>
<h4 id="data数据"><a href="#data数据" class="headerlink" title="data数据"></a>data数据</h4><blockquote>
<p>可以放string number boolean array json(object)等类型数据</p>
</blockquote>
<h4 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h4><blockquote>
<p>在公司中我们有的时候看到php的小伙伴用think php 的if else 和for循环我们的模板是不是很羡慕，我们vue也提供了这样的书写方法，有人说vue的条件渲染与php 的think php比起来如何 :-D我不说话</p>
</blockquote>
<h5 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h5><p><em>html</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app3&quot;&gt;</div><div class="line">	&lt;p v-if=&quot;see&quot;&gt;你看到的吗&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"> var app3=new Vue(&#123;</div><div class="line"> 	el:&quot;#app3&quot;,</div><div class="line"> 	data:&#123;</div><div class="line"> 		see:true</div><div class="line"> 	&#125;</div><div class="line"> </div><div class="line"> &#125;)</div></pre></td></tr></table></figure></p>
<h5 id="v-for循环列表"><a href="#v-for循环列表" class="headerlink" title="v-for循环列表"></a>v-for循环列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var app=new Vue(&#123;</div><div class="line">		el:&quot;#app&quot;,</div><div class="line">		data:&#123;</div><div class="line">			list :[</div><div class="line">				&#123;text:&apos;我爱编程&apos;&#125;,</div><div class="line">				&#123;text:&apos;编程是我快乐&apos;&#125;,</div><div class="line">				&#123;text:&apos;学习vue&apos;&#125;</div><div class="line">			]</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">	var app2=new Vue(&#123;</div><div class="line">		el:&quot;#app2&quot;,</div><div class="line">		data:&#123;</div><div class="line">			see:true</div><div class="line">		&#125;</div><div class="line">	&#125;)</div></pre></td></tr></table></figure>
<h5 id="处理用户的事件"><a href="#处理用户的事件" class="headerlink" title="处理用户的事件"></a>处理用户的事件</h5><blockquote>
<p>为了可以和用户进行交互vue增加了on进行处理</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app3&quot;&gt; </div><div class="line">			&lt;p&gt;&#123; &#123;message&#125; &#125;&lt;/p&gt;</div><div class="line">			&lt;button @click=&quot;reversefn&quot;&gt;翻转&lt;/button&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">var app3=new Vue(&#123;</div><div class="line">		el:&quot;#app3&quot;,</div><div class="line">		data:&#123;</div><div class="line">			message:&quot;123456789&quot;</div><div class="line">		&#125;,</div><div class="line">		methods:&#123;</div><div class="line">			reversefn:function()&#123;</div><div class="line">				console.log(this.message);</div><div class="line">				this.message=this.message.split(&quot;&quot;).reverse().join(&quot;&quot;);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;)</div></pre></td></tr></table></figure>
<h5 id="数据双向绑定"><a href="#数据双向绑定" class="headerlink" title="数据双向绑定"></a>数据双向绑定</h5><blockquote>
<p>vue提供了数据双向绑定什么是数据双向绑定呢？我们在第一节的时候实现了数据单向绑定当我们更新model时viwe可以自动进行更新<br>双向绑定是我们更新了model层数据view会进行更新，用户更新viwe数据我们model层会进行更新vue可以轻松的实现表单输入和应用状态的双向绑定</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app4&quot;&gt;</div><div class="line">		&lt;input type=&quot;text&quot;  v-model=&quot;message&quot;/&gt;</div><div class="line">		&#123; &#123;message&#125; &#125;</div><div class="line">&lt;/div&gt;</div><div class="line">var app4=new Vue(&#123;</div><div class="line">		el:&quot;#app4&quot;,</div><div class="line">		data:&#123;</div><div class="line">			message:&quot;123456789&quot;</div><div class="line">		&#125;</div><div class="line">	&#125;)</div></pre></td></tr></table></figure>
<h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app7&quot;&gt;</div><div class="line">		&lt;ol&gt;</div><div class="line">			&lt;todo-item v-for=&quot;value of list&quot; v-bind:todo=&quot;value&quot; &gt;&lt;/todo-item&gt;</div><div class="line">		&lt;/ol&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">//声明一个模板</div><div class="line">	var commonp=Vue.component(&apos;todo-item&apos;,&#123;</div><div class="line">		props:[&apos;todo&apos;],</div><div class="line">		template:&apos;&lt;li &gt;&#123; &#123;todo.text&#125; &#125;&lt;/li&gt;&apos;</div><div class="line">		</div><div class="line">	&#125;)</div><div class="line">var app7=new Vue(&#123;</div><div class="line">		el:&quot;#app7&quot;,</div><div class="line">		data:&#123;</div><div class="line">			list:[</div><div class="line">				&#123;text:&apos;我爱编程心情好好&apos;&#125;,</div><div class="line">				&#123;text:&apos;i love coding&apos;&#125;,</div><div class="line">				&#123;text:&apos;谢谢你&apos;&#125;</div><div class="line">			]</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		</div><div class="line">	&#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;vue实战教程&quot;&gt;&lt;a href=&quot;#vue实战教程&quot; class=&quot;headerlink&quot; title=&quot;vue实战教程&quot;&gt;&lt;/a&gt;vue实战教程&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;jq现在越来越笨重mvvm框架层出不求。现在开始Vue的教程吧。vue作者
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jquery的扩展</title>
    <link href="http://yoursite.com/2017/05/24/jq/"/>
    <id>http://yoursite.com/2017/05/24/jq/</id>
    <published>2017-05-24T14:29:28.000Z</published>
    <updated>2017-05-24T14:32:19.090Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jq的扩展研究"><a href="#jq的扩展研究" class="headerlink" title="jq的扩展研究"></a>jq的扩展研究</h3><h4 id="fn"><a href="#fn" class="headerlink" title="$.fn"></a>$.fn</h4><blockquote>
<p>据不准确统计网站78/100 jquery的身影，jquery也引申除了大量的插件方便了我们的工作，轮播图各种各样的的 jq方便的操作dom和链式调用和兼容性大大的方便了攻城狮 <a href="http://www.jq22.com/" target="_blank" rel="external">jquery插件库</a></p>
</blockquote>
<h5 id="怎么用jq来编写插件呢？"><a href="#怎么用jq来编写插件呢？" class="headerlink" title="怎么用jq来编写插件呢？"></a>怎么用jq来编写插件呢？</h5><blockquote>
<p>在工作中你肯定这样写过</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$(&quot;h1 span&quot;).css(&#123;&quot;background&quot;:“#404040”,&quot;color&quot;:&quot;#ffffff&quot;&#125;);</div><div class="line">//链式调用就是方便</div><div class="line">//但是如果我们如果要是在其他的地方也是这么一句话呢怎么样实现把他挂载$上呢。</div><div class="line"></div><div class="line">$.fn.changestyleFn=function()&#123;</div><div class="line">	this.css(&#123;&quot;background&quot;:“#404040”,&quot;color&quot;:&quot;#ffffff&quot;&#125;)</div><div class="line">	return this;</div><div class="line">    //为什么return this 呢因为jq是链式调用啊每次都把这个对象都返回出去啊。为了后面的链式调用所以要把它返回出去。</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">//我们在别的地方就直接可以这么使用;</div><div class="line">$(&quot;.box1&quot;).changestyleFn();</div><div class="line">$(&quot;.box2&quot;).changestyleFn();</div><div class="line">//是不是很优雅啊。</div></pre></td></tr></table></figure>
<a id="more"></a>
<blockquote>
<h4 id="如果使用者想自己传入background和color的值呢"><a href="#如果使用者想自己传入background和color的值呢" class="headerlink" title="如果使用者想自己传入background和color的值呢?"></a>如果使用者想自己传入background和color的值呢?</h4><p>有的同学们肯定想到了可以当做形参传过去</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//我们可以这样</div><div class="line">$.fn.changestyleFn=function(bg)&#123;</div><div class="line">    this.css(bg)</div><div class="line">    return this;</div><div class="line">    //为什么return this 呢因为jq是链式调用啊每次都把这个对象都返回出去啊。为了后面的链式调用所以要把它返回出去。</div><div class="line"></div><div class="line">&#125;</div><div class="line">//用户使用的可以直接穿参调用</div><div class="line"></div><div class="line">$(&quot;.box&quot;).changestyleFn(&#123;&quot;background&quot;:“#404040”,&quot;color&quot;:&quot;#ffffff&quot;&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>如果又来一个用户说你怎么没有缺省值啊。(“我想说你怎么不懒死啊 生气.jpg”)。<br>我知道大家肯定用过简单<code>for in</code> <code>&amp;&amp;</code>和<code>||</code>可以得到一个缺省值。</p>
</blockquote>
<h4 id="另一种方法-extend-target-obj1-obj2…"><a href="#另一种方法-extend-target-obj1-obj2…" class="headerlink" title="另一种方法 $.extend(target,obj1,obj2….),"></a>另一种方法 $.extend(target,obj1,obj2….),</h4><blockquote>
<p>他可以把多个对象的属性合并最终合并到target里。后面的优先级更高总是后面的覆盖前面的。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var opt=$.extend(&#123;&#125;,&#123;background:&quot;red&quot;,color:&quot;#fff&quot;&#125;,option);</div><div class="line">//option为用户传过来的</div></pre></td></tr></table></figure>
<blockquote>
<p>opt放到哪里比较好呢,全局肯定不好当让是我们的$.fn.changestyleFn的函数里面了。<br>最终版来袭</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">	$.fn.changestyleFn=function(option)&#123;</div><div class="line">    var opt=$.extend(&#123;&#125;,&#123;background:&quot;red&quot;,color:&quot;#fff&quot;&#125;,option);</div><div class="line">    this.css(opt)</div><div class="line">    return this;</div><div class="line">&#125;</div><div class="line">$(&quot;body&quot;).changestyleFn();</div><div class="line">$(&quot;body&quot;).changestyleFn(&#123;background:&quot;#404040&quot;,color:&quot;red&quot;&#125;);</div></pre></td></tr></table></figure>
<p>其实其他的插件也是这么做的。</p>
<blockquote>
<p>最后不得多说一句，jq火是在各种兼容的浏览器时代但是随着现在移动端风靡全球jq现在就显得臃肿不堪。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;jq的扩展研究&quot;&gt;&lt;a href=&quot;#jq的扩展研究&quot; class=&quot;headerlink&quot; title=&quot;jq的扩展研究&quot;&gt;&lt;/a&gt;jq的扩展研究&lt;/h3&gt;&lt;h4 id=&quot;fn&quot;&gt;&lt;a href=&quot;#fn&quot; class=&quot;headerlink&quot; title=&quot;$.fn&quot;&gt;&lt;/a&gt;$.fn&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;据不准确统计网站78/100 jquery的身影，jquery也引申除了大量的插件方便了我们的工作，轮播图各种各样的的 jq方便的操作dom和链式调用和兼容性大大的方便了攻城狮 &lt;a href=&quot;http://www.jq22.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jquery插件库&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;怎么用jq来编写插件呢？&quot;&gt;&lt;a href=&quot;#怎么用jq来编写插件呢？&quot; class=&quot;headerlink&quot; title=&quot;怎么用jq来编写插件呢？&quot;&gt;&lt;/a&gt;怎么用jq来编写插件呢？&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;在工作中你肯定这样写过&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$(&amp;quot;h1 span&amp;quot;).css(&amp;#123;&amp;quot;background&amp;quot;:“#404040”,&amp;quot;color&amp;quot;:&amp;quot;#ffffff&amp;quot;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//链式调用就是方便&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//但是如果我们如果要是在其他的地方也是这么一句话呢怎么样实现把他挂载$上呢。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$.fn.changestyleFn=function()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	this.css(&amp;#123;&amp;quot;background&amp;quot;:“#404040”,&amp;quot;color&amp;quot;:&amp;quot;#ffffff&amp;quot;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	return this;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //为什么return this 呢因为jq是链式调用啊每次都把这个对象都返回出去啊。为了后面的链式调用所以要把它返回出去。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//我们在别的地方就直接可以这么使用;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&amp;quot;.box1&amp;quot;).changestyleFn();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&amp;quot;.box2&amp;quot;).changestyleFn();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//是不是很优雅啊。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>map reduce 的方法学习</title>
    <link href="http://yoursite.com/2017/05/23/js/"/>
    <id>http://yoursite.com/2017/05/23/js/</id>
    <published>2017-05-23T13:04:58.000Z</published>
    <updated>2017-05-23T16:13:19.602Z</updated>
    
    <content type="html"><![CDATA[<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><h4 id="举一个栗子"><a href="#举一个栗子" class="headerlink" title="举一个栗子"></a>举一个栗子</h4><blockquote>
<p>js高阶函数Javascript的函数其实就是指向某个变量。既然变量可以指向函数，函数的参数可以使变量，那么一个函数可以接受另一个函数卫星参数。就比说ajax的成功回调函数就是当做形参穿进去了，当相应成功的时候执行函数。</p>
</blockquote>
<p>再比如一个最简单的高阶函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function add(x,y,f)&#123;</div><div class="line">	return f(x)+f(y);</div><div class="line">&#125;</div><div class="line">var x=-3;</div><div class="line">var y=4;</div><div class="line">var f=Math.abs;</div><div class="line">alert(add(x,y,f))//7</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h4 id="map方法"><a href="#map方法" class="headerlink" title="map方法"></a>map方法</h4><p>定义</p>
<blockquote>
<p>map 方法可以返回一个新数组,数组中的元素为原始数组元素调用处理后的值。也就是说map接受一个函数返回的数组中的元素被传入的函数处理后的新函数。</p>
</blockquote>
<p>####### tip </p>
<ol>
<li>不会改变原来的数组</li>
<li>不处理空的数组</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var arr=[2,3,4,5,6];</div><div class="line">function xx(x)&#123;</div><div class="line">	return x*x;</div><div class="line">&#125;</div><div class="line">console.log(arr.map(xx))//[4, 9, 16, 25, 36]</div></pre></td></tr></table></figure>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote>
<p>reduce()方法接受一个函数作为一个累加器，数组中的每个值进行计算<br>f(f(f(x1, x2), x3), x4)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr=[1,2,3,4,5];</div><div class="line">arr.reduce(function(x,y)&#123;</div><div class="line">	return x+y</div><div class="line">&#125;);//15</div></pre></td></tr></table></figure>
<p>好了今天学会了map reduce 的方法了。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=2&id=32192436&auto=1&height=32"></iframe>

















]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;高阶函数&quot;&gt;&lt;a href=&quot;#高阶函数&quot; class=&quot;headerlink&quot; title=&quot;高阶函数&quot;&gt;&lt;/a&gt;高阶函数&lt;/h3&gt;&lt;h4 id=&quot;举一个栗子&quot;&gt;&lt;a href=&quot;#举一个栗子&quot; class=&quot;headerlink&quot; title=&quot;举一个栗子&quot;&gt;&lt;/a&gt;举一个栗子&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;js高阶函数Javascript的函数其实就是指向某个变量。既然变量可以指向函数，函数的参数可以使变量，那么一个函数可以接受另一个函数卫星参数。就比说ajax的成功回调函数就是当做形参穿进去了，当相应成功的时候执行函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再比如一个最简单的高阶函数&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function add(x,y,f)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	return f(x)+f(y);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var x=-3;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var y=4;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var f=Math.abs;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(add(x,y,f))//7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>select</title>
    <link href="http://yoursite.com/2017/05/22/select/"/>
    <id>http://yoursite.com/2017/05/22/select/</id>
    <published>2017-05-22T15:44:56.000Z</published>
    <updated>2017-05-22T16:19:27.194Z</updated>
    
    <content type="html"><![CDATA[<h3 id="bootstrap-中的多选使用"><a href="#bootstrap-中的多选使用" class="headerlink" title="bootstrap 中的多选使用"></a>bootstrap 中的多选使用</h3><p><a href="https://silviomoreto.github.io/bootstrap-select/" target="_blank" rel="external">官方文档</a></p>
<blockquote>
<ol>
<li>首先先引入bootstrap.js(不要忘记jquery)和boostrap.css</li>
<li>引入bootstrap-select.js和css</li>
<li>好了现在开始</li>
</ol>
</blockquote>
<h4 id="1-第一种静态生成"><a href="#1-第一种静态生成" class="headerlink" title="1.第一种静态生成"></a>1.第一种静态生成</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;select class=&quot;selectpicker&quot;&gt;</div><div class="line">      &lt;option value=&quot;65&quot;&gt;淹死の鱼&lt;/option&gt;</div><div class="line">      &lt;option value=&quot;66&quot;&gt;宋真真&lt;/option&gt;</div><div class="line">      &lt;option value=&quot;89&quot;&gt;燕子&lt;/option&gt;</div><div class="line">      &lt;option value=&quot;88&quot;&gt;何兴华&lt;/option&gt;</div><div class="line">      &lt;option value=&quot;90&quot;&gt;巧芝-冯&lt;/option&gt;</div><div class="line">      &lt;option value=&quot;91&quot;&gt;曼舞飞扬&lt;/option&gt;</div><div class="line">      &lt;option value=&quot;94&quot;&gt;鲍海地&lt;/option&gt;</div><div class="line">      &lt;option value=&quot;63&quot;&gt;蔡&lt;/option&gt;</div><div class="line">      &lt;option value=&quot;381&quot;&gt;Tank&lt;/option&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p>直接就在页面中生成了。</p>
<h4 id="2-动态生成"><a href="#2-动态生成" class="headerlink" title="2.动态生成"></a>2.动态生成</h4><blockquote>
<p>在实际开发过程中我们肯定会遇到字符串拼接生成在bootstrap-select有一个很好的方法那就是 $(‘.selectpicker’).selectpicker(‘refresh’);</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var str1=&quot;&quot;;</div><div class="line">for(var i=0;i&lt;data.length;i++)&#123;</div><div class="line">	str1+=&apos;&lt;option value=&quot;&apos;+data.val+&apos;&quot;&gt;&apos;+data.name+&apos;&lt;/option&gt;&apos;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">var str=&apos;&lt;select class=&quot;selectpicker  pull-left&quot; multiple data-noneSelectedText=&quot;点击添加&quot; data-title=&quot;点击添加&quot;&gt;&apos;+str1+&apos;&lt;/select&gt;&apos;;</div><div class="line"> $(&quot;.selectList&quot;).html(str);</div><div class="line">$(&apos;.selectpicker&apos;).selectpicker(&apos;refresh&apos;);</div></pre></td></tr></table></figure>
<p>然后就直接好了，什么时候需要动态添加就直接refresh就好了</p>
<a id="more"></a>
<h4 id="3-关于事件的触发"><a href="#3-关于事件的触发" class="headerlink" title="3.关于事件的触发"></a>3.关于事件的触发</h4><blockquote>
<p>刚开始的时候我也是看了会文档发现没有选择的事件触发啊，后来我才发现原来用的是原生的事件，bootstrap虽然改变了样式结构但是事件最后是没有更改的。直接用原生就好了。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(&quot;.selectList&quot;).on(&quot;change&quot;,&quot;.selectpicker&quot;,function()&#123;</div><div class="line">       selectName=[];</div><div class="line">       for (var i=0;i&lt;$(this).find(&quot;option:selected&quot;).length;i++)&#123;</div><div class="line">           var obj=&#123;&#125;;</div><div class="line">           obj.id=$(this).find(&quot;option:selected&quot;).eq(i).val();</div><div class="line">           obj.name=$(this).find(&quot;option:selected&quot;).eq(i).text();</div><div class="line">           selectName.push(obj);</div><div class="line">       &#125;</div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>那么现在一个简单的boostrap-select简单的需求就完成了。</p>
</blockquote>
<p><img src="/images/select.png" alt=""><br>如果需要更多的方法那就去看文档去吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;bootstrap-中的多选使用&quot;&gt;&lt;a href=&quot;#bootstrap-中的多选使用&quot; class=&quot;headerlink&quot; title=&quot;bootstrap 中的多选使用&quot;&gt;&lt;/a&gt;bootstrap 中的多选使用&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://silviomoreto.github.io/bootstrap-select/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;首先先引入bootstrap.js(不要忘记jquery)和boostrap.css&lt;/li&gt;
&lt;li&gt;引入bootstrap-select.js和css&lt;/li&gt;
&lt;li&gt;好了现在开始&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1-第一种静态生成&quot;&gt;&lt;a href=&quot;#1-第一种静态生成&quot; class=&quot;headerlink&quot; title=&quot;1.第一种静态生成&quot;&gt;&lt;/a&gt;1.第一种静态生成&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;select class=&amp;quot;selectpicker&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;option value=&amp;quot;65&amp;quot;&amp;gt;淹死の鱼&amp;lt;/option&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;option value=&amp;quot;66&amp;quot;&amp;gt;宋真真&amp;lt;/option&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;option value=&amp;quot;89&amp;quot;&amp;gt;燕子&amp;lt;/option&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;option value=&amp;quot;88&amp;quot;&amp;gt;何兴华&amp;lt;/option&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;option value=&amp;quot;90&amp;quot;&amp;gt;巧芝-冯&amp;lt;/option&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;option value=&amp;quot;91&amp;quot;&amp;gt;曼舞飞扬&amp;lt;/option&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;option value=&amp;quot;94&amp;quot;&amp;gt;鲍海地&amp;lt;/option&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;option value=&amp;quot;63&amp;quot;&amp;gt;蔡&amp;lt;/option&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;option value=&amp;quot;381&amp;quot;&amp;gt;Tank&amp;lt;/option&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/select&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;直接就在页面中生成了。&lt;/p&gt;
&lt;h4 id=&quot;2-动态生成&quot;&gt;&lt;a href=&quot;#2-动态生成&quot; class=&quot;headerlink&quot; title=&quot;2.动态生成&quot;&gt;&lt;/a&gt;2.动态生成&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;在实际开发过程中我们肯定会遇到字符串拼接生成在bootstrap-select有一个很好的方法那就是 $(‘.selectpicker’).selectpicker(‘refresh’);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var str1=&amp;quot;&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;for(var i=0;i&amp;lt;data.length;i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	str1+=&amp;apos;&amp;lt;option value=&amp;quot;&amp;apos;+data.val+&amp;apos;&amp;quot;&amp;gt;&amp;apos;+data.name+&amp;apos;&amp;lt;/option&amp;gt;&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var str=&amp;apos;&amp;lt;select class=&amp;quot;selectpicker  pull-left&amp;quot; multiple data-noneSelectedText=&amp;quot;点击添加&amp;quot; data-title=&amp;quot;点击添加&amp;quot;&amp;gt;&amp;apos;+str1+&amp;apos;&amp;lt;/select&amp;gt;&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; $(&amp;quot;.selectList&amp;quot;).html(str);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&amp;apos;.selectpicker&amp;apos;).selectpicker(&amp;apos;refresh&amp;apos;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后就直接好了，什么时候需要动态添加就直接refresh就好了&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>程序员买盖饭</title>
    <link href="http://yoursite.com/2017/05/22/test/"/>
    <id>http://yoursite.com/2017/05/22/test/</id>
    <published>2017-05-21T17:09:30.000Z</published>
    <updated>2017-05-22T16:17:25.977Z</updated>
    
    <content type="html"><![CDATA[<p>程序猿,你也配吃10元的盒饭?<br>又是一个阳光灿烂的中午，看了一上午的报纸，茶水也顺带喝了不少，肚子早已经咕咕作响了，今天中午吃点什么了，貌似楼下的新开张的盒饭还不错，于是我来到楼下准备买上一盒。<br>菜色还不错，价格有6元，8元，10元，12元，20元的，像哥这样的精英管理人才，怎么着也的吃最高级的才配合身份，就在我准备购买时，一个响亮的声音响起。<br>“老板，给我一份10元的盒饭”。<br>顺势撇了一眼，一个小伙子，眉开眼笑的靠近盒饭铺，今天是1号，看样子是发工资了。就当他走近时，看到了我，刚才的欢愉的表情瞬时黯淡下去，他知道我认出了他，靠，满头白里带一点黑的头发，永远没睡醒的眼神，以及那凌乱的胡渣子，都出卖了他的身份。我继续狠狠的盯着他，他越发的羞愧了，我犀利的眼神正在和他做着底层通信，我默默的向他传达一个信息，<br>“你，也配吃10元的盒饭?”。<br>他哀怜的眼神似乎在祈求我不要拆穿他的身份，可惜，哥这么有正义感的人，怎么能在这个时候放弃原则!<br>“你不是隔壁公司的程序员么?”<br>就这一瞬间，他整个人似乎崩溃下去，刚才欢愉的表情彻底变为哭丧，周围的小摊贩以及路人甲乙丙丁，都纷纷投来了鄙视的眼光，他瘟鸡一样的双手抓着头发，痛苦的蹲了下去。<br>就在这时，人群中终于有人忍不住了，大声呵骂到，</p>
<a id="more"></a>
<p>“呸，程序员也敢吃10元的盒饭，真不要脸”<br>一位老大娘好心的提醒到，<br>“小伙子啊，你一个程序员，挣点钱不容易啊，怎么吃10元的盒饭啊”<br>一名打扮妖艳入时的姑娘说到，<br>“人家当小姐的都才吃10元，你也敢要10元的?”<br>我义正言辞的给他说到，<br>“我说一句话顶你写一万行代码，也才吃20元的盒饭，你竟敢吃10元的”<br>老板也发话了，<br>“是程序员啊，太不好意思了，你吃6元的吧，不然人家知道我卖了你10元的，我这生意就做不了啊”<br>他终于发出颤抖的声音说到<br>“对不起，我刚才说错了，给我一份6元的”。<br>这时人群中爆发出激烈的掌声，我知道，这是我又一次坚持原则，换来的荣誉的赞赏!  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;程序猿,你也配吃10元的盒饭?&lt;br&gt;又是一个阳光灿烂的中午，看了一上午的报纸，茶水也顺带喝了不少，肚子早已经咕咕作响了，今天中午吃点什么了，貌似楼下的新开张的盒饭还不错，于是我来到楼下准备买上一盒。&lt;br&gt;菜色还不错，价格有6元，8元，10元，12元，20元的，像哥这样的精英管理人才，怎么着也的吃最高级的才配合身份，就在我准备购买时，一个响亮的声音响起。&lt;br&gt;“老板，给我一份10元的盒饭”。&lt;br&gt;顺势撇了一眼，一个小伙子，眉开眼笑的靠近盒饭铺，今天是1号，看样子是发工资了。就当他走近时，看到了我，刚才的欢愉的表情瞬时黯淡下去，他知道我认出了他，靠，满头白里带一点黑的头发，永远没睡醒的眼神，以及那凌乱的胡渣子，都出卖了他的身份。我继续狠狠的盯着他，他越发的羞愧了，我犀利的眼神正在和他做着底层通信，我默默的向他传达一个信息，&lt;br&gt;“你，也配吃10元的盒饭?”。&lt;br&gt;他哀怜的眼神似乎在祈求我不要拆穿他的身份，可惜，哥这么有正义感的人，怎么能在这个时候放弃原则!&lt;br&gt;“你不是隔壁公司的程序员么?”&lt;br&gt;就这一瞬间，他整个人似乎崩溃下去，刚才欢愉的表情彻底变为哭丧，周围的小摊贩以及路人甲乙丙丁，都纷纷投来了鄙视的眼光，他瘟鸡一样的双手抓着头发，痛苦的蹲了下去。&lt;br&gt;就在这时，人群中终于有人忍不住了，大声呵骂到，&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/05/19/hello-world/"/>
    <id>http://yoursite.com/2017/05/19/hello-world/</id>
    <published>2017-05-18T16:18:14.435Z</published>
    <updated>2017-05-22T16:17:01.736Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
